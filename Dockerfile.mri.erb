FROM ubuntu:<%= platform=~/linux/ ? "16.04" : "20.04" %>

RUN apt-get -y update && \
    apt-get install -y curl git-core xz-utils build-essential wget unzip sudo gnupg2 dirmngr && \
    rm -rf /var/lib/apt/lists/*

# Add "rvm" as system group, to avoid conflicts with host GIDs typically starting with 1000
RUN groupadd -r rvm && useradd -r -g rvm -G sudo -p "" --create-home rvm && \
    echo "source /etc/profile.d/rvm.sh" >> /etc/rubybashrc
USER rvm

RUN mkdir ~/.gnupg && \
    chmod 700 ~/.gnupg && \
    echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf

# install rvm, RVM 1.26.0+ has signed releases, source rvm for usage outside of package scripts
RUN gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB && \
    (curl -L http://get.rvm.io | sudo bash) && \
    bash -c " \
        source /etc/rubybashrc && \
        rvmsudo rvm cleanup all "

# Import patch files for ruby and gems
COPY build/patches /home/rvm/patches/
ENV BASH_ENV /etc/rubybashrc

# install rubies and fix permissions on
ENV RVM_RUBIES 2.5.8 2.7.2
RUN bash -c " \
    export CFLAGS='-s -O3 -fno-fast-math -fPIC' && \
    for v in ${RVM_RUBIES} ; do \
        rvm install \$v --patch \$(echo ~/patches/ruby-\$v/* | tr ' ' ','); \
    done && \
    rvm cleanup all && \
    find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "

# Install rake-compiler and typical gems in all Rubies
# do not generate documentation for gems
RUN echo "gem: --no-ri --no-rdoc" >> ~/.gemrc && \
    bash -c " \
        rvm all do gem update --system --no-document && \
        rvm all do gem install --no-document bundler 'bundler:~>1.16' 'rake-compiler:1.1.1' 'hoe:3.20.0' mini_portile rubygems-tasks mini_portile2 && \
        find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "

# Install rake-compiler's cross rubies in global dir instead of /root
RUN sudo mkdir -p /usr/local/rake-compiler && \
    sudo chown rvm.rvm /usr/local/rake-compiler && \
    ln -s /usr/local/rake-compiler ~/.rake-compiler

# Add cross compilers for Windows and Linux
USER root
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get -y update && \
    apt-get install -y moreutils <%
if platform=~/darwin/     %> clang cmake python lzma-dev libxml2-dev libssl-dev libc++-10-dev <% end %><%
if platform=~/x86-mingw32/   %> gcc-mingw-w64-i686 g++-mingw-w64-i686 <% end %><%
if platform=~/x64-mingw32/ %> gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 <% end %><%
if platform=~/x86-linux/     %> gcc-multilib g++-multilib <% end %> && \
    rm -rf /var/lib/apt/lists/*

RUN bash -c " \
        rvm alias create default 2.5.8 && \
        rvm use default "

<% if platform=~/linux/   %>
# Create dev tools x86-linux-*
COPY build/mk_i686.rb /root/
RUN bash -c " \
        ruby /root/mk_i686.rb "
<% end %>

<% if platform=~/darwin/ %>
RUN git clone -q --depth=1 https://github.com/tpoechtrager/osxcross.git /opt/osxcross && rm -rf /opt/osxcross/.git && \
    cd /opt/osxcross/tarballs && \
    curl -L -o MacOSX11.1.sdk.tar.xz https://github.com/larskanis/MacOSX-SDKs/releases/download/11.1/MacOSX11.1.sdk.tar.xz && \
    tar -xf MacOSX11.1.sdk.tar.xz -C . && \
    cp -rf /usr/lib/llvm-10/include/c++ MacOSX11.1.sdk/usr/include/c++ && \
    cp -rf /usr/include/x86_64-linux-gnu/c++/9/bits/ MacOSX11.1.sdk/usr/include/c++/v1/bits && \
    mv MacOSX11.1.sdk MacOSX11.0.sdk && \
    tar -cJf MacOSX11.0.sdk.tar.xz MacOSX11.0.sdk && \
    cd /opt/osxcross && \
    UNATTENDED=1 SDK_VERSION=11.0 OSX_VERSION_MIN=10.13 USE_CLANG_AS=1 ./build.sh && \
    rm -rf *~ build tarballs/*

RUN echo "export PATH=/opt/osxcross/target/bin:\$PATH" >> /etc/rubybashrc && \
    echo "export MACOSX_DEPLOYMENT_TARGET=10.13" >> /etc/rubybashrc && \
    echo "export OSXCROSS_MP_INC=1" >> /etc/rubybashrc

# There's no objdump in osxcross but we can use llvm's
RUN ln -s /usr/lib/llvm-10/bin/llvm-objdump /opt/osxcross/target/bin/<%= target %>-objdump

<% end %>

# Patch rake-compiler to build and install static libraries for Linux rubies
USER rvm
COPY build/patches2 /home/rvm/patches/
RUN bash -c " \
    for v in ${RVM_RUBIES} ; do \
      cd /usr/local/rvm/gems/ruby-\$v/gems/rake-compiler-1.1.1 && \
      echo applying patches to ruby-\$v /home/rvm/patches/rake-compiler-1.1.1/*.patch && \
      ( git apply /home/rvm/patches/rake-compiler-1.1.1/*.patch || true ) && \
      cd /usr/local/rvm/gems/ruby-\$v/gems/hoe-3.20.0 && \
      echo applying patches to ruby-\$v /home/rvm/patches/hoe-3.20.0/*.patch && \
      ( git apply /home/rvm/patches/hoe-3.20.0/*.patch || true ) \
    done "

# Patch rubies for cross build
USER root
RUN bash -c " \
    for v in 2.7.0 3.0.0-rc1 ; do \
      curl -SL http://cache.ruby-lang.org/pub/ruby/\${v:0:3}/ruby-\$v.tar.xz | tar -xJC /root/ && \
      cd /root/ruby-\$v && \
      git apply /home/rvm/patches/ruby-\$v/*.patch && \
      cd .. && \
      mkdir -p /usr/local/rake-compiler/sources/ && \
      tar cjf /usr/local/rake-compiler/sources/ruby-\$v.tar.bz2 ruby-\$v && \
      chown rvm /usr/local/rake-compiler -R && \
      rm -rf /root/ruby-\$v ; \
    done "
USER rvm


ENV XRUBIES 3.0.0-rc1:2.7.0:2.6.0:2.5.0:2.4.0:2.3.0

<% strip = '-s' if platform !~ /darwin/ %>
# Build all xruby versions in parallel
# Then cleanup all build artifacts
RUN bash -c " \
    export CFLAGS='-O1 -fno-omit-frame-pointer -fno-fast-math -fstack-protector-strong <%= strip %>' && \
    export LDFLAGS='-pipe -fstack-protector-strong <%= strip %>' && \
    export LIBS='-fstack-protector-strong' && \
    <%= "export CC=#{target}-clang &&" if platform =~ /darwin/ %> \
    export MAKE='make V=1' && \
    rake-compiler cross-ruby VERSION=$XRUBIES HOST=<%= target %> && \
    rm -rf ~/.rake-compiler/builds ~/.rake-compiler/sources && \
    find /usr/local/rvm -type d -print0 | sudo xargs -0 chmod g+sw "

<% if platform=~/linux/ %>
# Avoid linking against libruby shared object.
# See also https://github.com/rake-compiler/rake-compiler-dock/issues/13
RUN find /usr/local/rake-compiler/ruby/*linux*/ -name libruby.so | xargs rm
RUN find /usr/local/rake-compiler/ruby/*linux*/ -name libruby-static.a | while read f ; do cp $f `echo $f | sed s/-static//` ; done
RUN find /usr/local/rake-compiler/ruby/*linux*/ -name libruby.a | while read f ; do ar t $f | xargs ar d $f ; done
RUN find /usr/local/rake-compiler/ruby/*linux*/ -name mkmf.rb | while read f ; do sed -i ':a;N;$!ba;s/TRY_LINK = [^\n]*\n[^\n]*\n[^\n]*LOCAL_LIBS)/& -lruby-static/' $f ; done
<% end %>

<% if platform=~/mingw/ %>
# RubyInstaller doesn't install libgcc -> link it static.
RUN find /usr/local/rake-compiler/ruby/*mingw*/ -name rbconfig.rb | while read f ; do sed -i 's/."LDFLAGS". = "/&-static-libgcc /' $f ; done
# Raise Windows-API to Vista (affects ruby < 2.6 only)
RUN find /usr/local/rake-compiler/ruby -name rbconfig.rb | while read f ; do sed -i 's/0x0501/0x0600/' $f ; done
# Don't link to static libruby
RUN find /usr/local/rake-compiler/ruby -name *msvcrt-ruby*.dll.a | while read f ; do n=`echo $f | sed s/.dll//` ; mv $f $n ; done
<% end %>

USER root

# Add more libraries and tools to support cross build
RUN <%
if platform=~/x86-linux/   %> dpkg --add-architecture i386 && <% end %> \
    apt-get -y update && \
    apt-get install -y cmake <%
if platform=~/x86-linux/   %> libc6-dev:i386 libudev-dev:i386 <% end %><%
if platform=~/x86_64-linux/ %> libudev-dev <% end %> && \
    rm -rf /var/lib/apt/lists/*

# Fix paths in rake-compiler/config.yml and add rvm and mingw-tools to the global bashrc
RUN sed -i -- "s:/root/.rake-compiler:/usr/local/rake-compiler:g" /usr/local/rake-compiler/config.yml && \
    echo "source /etc/rubybashrc" >> /etc/bash.bashrc

<% if platform=~/mingw/ %>
# Install wrappers for strip commands as a workaround for "Protocol error" in boot2docker.
COPY build/strip_wrapper /root/
RUN mv /usr/bin/<%= target %>-strip /usr/bin/<%= target %>-strip.bin && \
    ln /root/strip_wrapper /usr/bin/<%= target %>-strip

# Use posix pthread for mingw so that C++ standard library for thread could be
# available such as std::thread, std::mutex, so on.
# https://sourceware.org/pthreads-win32/
RUN printf "1\n" | update-alternatives --config <%= target %>-gcc && \
    printf "1\n" | update-alternatives --config <%= target %>-g++
<% end %>

<% if platform=~/linux/ %>
# Make the system to have GLIBC 2.12 instead of 2.23 so that
# generated ruby package can run on CentOS 6 with GLIBC 2.12
RUN sed -i 's/__GLIBC_MINOR__\t[0-9][0-9]/__GLIBC_MINOR__\t12/' /usr/include/features.h
<% end %>

<% if platform=~/darwin/ %>
# Add a generic darwin target without version number
RUN grep -E 'rbconfig-[-0-9a-z_]+-darwin20' /usr/local/rake-compiler/config.yml | sed 's/rbconfig-[a-z0-9_]*-darwin20/rbconfig-<%= platform %>/' >> /usr/local/rake-compiler/config.yml
<% end %>

# Install SIGINT forwarder
COPY build/sigfw.c /root/
RUN gcc $HOME/sigfw.c -o /usr/local/bin/sigfw

# Install user mapper
COPY build/runas /usr/local/bin/

# Install sudoers configuration
COPY build/sudoers /etc/sudoers.d/rake-compiler-dock

ENV RUBY_CC_VERSION 3.0.0:2.7.0:2.6.0:2.5.0:2.4.0:2.3.0

CMD bash
